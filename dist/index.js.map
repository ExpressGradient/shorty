{"mappings":";;;;;;;;;;;;;AACA;;;;ACDA;;ACAA,yBAAc,GAAG,IAAI,CAAC,KAAK,CAAC,s1DAA8lE,CAAC,CAAC;;;;;ADM5nE,MAAM,uCAAiB,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IAClC,MAAM,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,QAAQ,CAAC,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE,CAAC;IACpC,IAAI,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,QAAQ,CAAC,CAAA,GAAA,2BAAI,CAAA,CAAC,OAAO,EAAE,CAAC;IACnC,IAAI,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,QAAQ,CAAC,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE,CAAC;IAClC,KAAK,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,QAAQ,CAAC,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE,CAAC;CACtC,CAAC,AAAC;AAEH,MAAM,4CAAsB,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IACvC,OAAO,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE;IACtB,IAAI,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QACd,EAAE,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE;KACpB,CAAC;CACL,CAAC,AAAC;AAEH,MAAM,yCAAmB,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IACpC,EAAE,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE;CACpB,CAAC,AAAC;AAEH,MAAM,qCAAe,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IAChC,aAAa,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QAAE,OAAO,EAAE,kBAAkB;KAAE,CAAC;CAC9D,CAAC,AAAC;AAEH,MAAM,4BAAM,GAAG,IAAI,CAAA,GAAA,gCAAY,CAAA,EAAE,AAAC;AAElC,MAAM,+BAAS,GAAuB,OAAO,GAAG,EAAE,IAAI,GAAK;IACvD,0CAA0C;IAC1C,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,OAAO,EAAE,KAAK,GAAK;QAC/C,IAAI;YACA,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;SAC7B,CAAC,OAAO,GAAG,EAAE;YACV,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;SACrC;KACJ,CAAC,CAAC;IAEH,4BAA4B;IAC5B,GAAG,CAAC,SAAS,CAAC;QAAE,GAAG,EAAE,QAAQ;QAAE,GAAG,CAAA,GAAA,gEAAU,CAAA;KAAE,CAAC,CAAC;IAEhD,mCAAmC;IACnC,GAAG,CAAC,GAAG,CAIH,GAAG,EACH;QACI,MAAM,EAAE;YACJ,WAAW,EAAE,CAAC;;;;;;gBAMd,CAAC;YACD,OAAO,EAAE,qCAAe;YACxB,WAAW,EAAE,uCAAiB;YAC9B,QAAQ,EAAE;AACN,gBAAA,GAAG,EAAE;oBACD,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE;wBAAE,IAAI,EAAE,8BAA8B;qBAAE;iBAClD;aACJ;SACJ;KACJ,EACD,OAAO,OAAO,EAAE,KAAK,GAAK;QACtB,IAAI;YACA,MAAM,KAAK,GAAgC;gBACvC,KAAK,EAAE;oBAAE,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE;iBAAE;gBAClC,OAAO,EAAE;oBAAE,IAAI,EAAE,IAAI;iBAAE;gBACvB,IAAI,EAAE,EAAE;aACX,AAAC;YAEF,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,EAAE;gBACrC,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,AAAC;gBAEpC,KAAK,CAAC,KAAK,CAAC,EAAE,GAAG;oBACb;wBAAE,SAAS,EAAE;oCAAE,MAAM;yBAAE;qBAAE;oBACzB;wBAAE,WAAW,EAAE;oCAAE,MAAM;yBAAE;qBAAE;oBAC3B;wBAAE,IAAI,EAAE;4BAAE,IAAI,EAAE;gCAAE,GAAG,EAAE;4CAAE,MAAM;iCAAE;6BAAE;yBAAE;qBAAE;iBAC1C,CAAC;aACL;YAED,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,EAClB,KAAK,CAAC,IAAI,GAAG,AAAC,CAAA,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAA,GAAI,EAAE,CAAC;YAG/C,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,EAClB,KAAK,CAAC,OAAO,GAAG;gBACZ,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK;aAC5C,CAAC;YAGN,KAAK,CAAC,IAAI,CAAC,MAAM,4BAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;SACrD,CAAC,OAAO,CAAC,EAAE;YACR,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,KAAK,CAAC,mBAAmB,CAAC,2BAA2B,CAAC,CAAC;SAC1D;KACJ,CACJ,CAAC;IAEF,gCAAgC;IAChC,GAAG,CAAC,IAAI,CAIJ,GAAG,EACH;QACI,MAAM,EAAE;YACJ,WAAW,EAAE,CAAC;;;;;gBAKd,CAAC;YACD,OAAO,EAAE,qCAAe;YACxB,IAAI,EAAE;gBAAE,IAAI,EAAE,8BAA8B;aAAE;YAC9C,QAAQ,EAAE;AACN,gBAAA,GAAG,EAAE,4CAAsB;aAC9B;SACJ;KACJ,EACD,OAAO,OAAO,EAAE,KAAK,GAAK;QACtB,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,AAAC;QAC7B,OAAO,CAAC,SAAS,GAAG,CAAA,GAAA,wCAAO,CAAA,CAAC,OAAO,CAAC,SAAS,EAAE;YAC3C,KAAK,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,IAAI;YACA,MAAM,MAAE,EAAE,CAAA,EAAE,GAAG,MAAM,4BAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACxC,IAAI,EAAE;oBACF,GAAG,OAAO;oBACV,aAAa;oBACb,IAAI,EAAE;wBAAE,MAAM,EAAE,OAAO,CAAC,IAAI;qBAAE;oBAC9B,IAAI,EAAE;wBAAE,OAAO,EAAE;4BAAE,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE;yBAAE;qBAAE;iBAC7C;gBACD,MAAM,EAAE;oBAAE,EAAE,EAAE,IAAI;iBAAE;aACvB,CAAC,AAAC;YAEH,KAAK,CACA,IAAI,CAAC,GAAG,CAAC,CACT,IAAI,CAAC;gBAAE,OAAO,EAAE,kBAAkB;gBAAE,IAAI,EAAE;wBAAE,EAAE;iBAAE;aAAE,CAAC,CAAC;SAC5D,CAAC,OAAO,CAAC,EAAE;YACR,IACI,CAAC,YAAY,CAAA,GAAA,0BAAM,CAAA,CAAC,6BAA6B,IACjD,CAAC,CAAC,IAAI,KAAK,OAAO,EAElB,KAAK,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC;iBAC7C;gBACH,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,KAAK,CAAC,mBAAmB,CAAC,6BAA6B,CAAC,CAAC;aAC5D;SACJ;KACJ,CACJ,CAAC;IAEF,gCAAgC;IAChC,GAAG,CAAC,MAAM,CACN,MAAM,EACN;QACI,MAAM,EAAE;YACJ,WAAW,EAAE,CAAC;;;;;gBAKd,CAAC;YACD,OAAO,EAAE,qCAAe;YACxB,MAAM,EAAE,yCAAmB;SAC9B;KACJ,EACD,OAAO,OAAO,EAAE,KAAK,GAAK;QACtB,IAAI;YACA,MAAM,4BAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE;oBAAE,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE;iBAAE;aACnC,CAAC,CAAC;YAEH,KAAK,CAAC,IAAI,CAAC;gBAAE,OAAO,EAAE,kBAAkB;aAAE,CAAC,CAAC;SAC/C,CAAC,OAAO,CAAC,EAAE;YACR,IACI,CAAC,YAAY,CAAA,GAAA,0BAAM,CAAA,CAAC,6BAA6B,IAChD,CAAA,CAAC,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,CAAA,AAAC,EAE1C,KAAK,CAAC,QAAQ,CACV,CAAC,kBAAkB,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,CACrD,CAAC;iBACC;gBACH,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,KAAK,CAAC,mBAAmB,CAAC,6BAA6B,CAAC,CAAC;aAC5D;SACJ;KACJ,CACJ,CAAC;CACL,AAAC;IAEF,wCAAyB,GAAV,+BAAS;;;AEtMxB;;;AAKA,MAAM,4BAAM,GAAG,IAAI,CAAA,GAAA,gCAAY,CAAA,EAAE,AAAC;AAElC,MAAM,kCAAY,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IAC7B,KAAK,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QAAE,MAAM,EAAE,OAAO;KAAE,CAAC;IACvC,QAAQ,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QAAE,SAAS,EAAE,EAAE;KAAE,CAAC;CAC3C,CAAC,AAAC;AAEH,MAAM,qCAAe,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IAChC,QAAQ,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE;IACvB,KAAK,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QAAE,MAAM,EAAE,OAAO;KAAE,CAAC;IACvC,QAAQ,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QAAE,SAAS,EAAE,EAAE;KAAE,CAAC;CAC3C,CAAC,AAAC;AAEH,MAAM,qCAAe,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IAChC,OAAO,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE;IACtB,IAAI,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QACd,KAAK,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE;KACvB,CAAC;CACL,CAAC,AAAC;AAEH,MAAM,0BAAI,GAAuB,OAAO,GAAG,EAAE,IAAI,GAAK;IAClD,GAAG,CAAC,IAAI,CACJ,WAAW,EACX;QACI,MAAM,EAAE;YACJ,WAAW,EAAE,CAAC;;;;;;gBAMd,CAAC;YACD,IAAI,EAAE,qCAAe;YACrB,QAAQ,EAAE;AAAE,gBAAA,GAAG,EAAE,qCAAe;aAAE;SACrC;KACJ,EACD,OAAO,OAAO,EAAE,KAAK,GAAK;QACtB,uCAAuC;QACvC,MAAM,YAAE,QAAQ,CAAA,SAAE,KAAK,CAAA,YAAE,QAAQ,CAAA,EAAE,GAAG,OAAO,CAAC,IAAI,AAAC;QAEnD,gBAAgB;QAChB,IAAI;YACA,oBAAoB;YACpB,MAAM,cAAc,GAAG,MAAM,CAAA,GAAA,kBAAI,CAAA,CAAC,QAAQ,EAAE,EAAE,CAAC,AAAC;YAEhD,MAAM,MAAE,EAAE,CAAA,EAAE,GAAG,MAAM,4BAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACpC,IAAI,EAAE;8BAAE,QAAQ;2BAAE,KAAK;oBAAE,QAAQ,EAAE,cAAc;iBAAE;gBACnD,MAAM,EAAE;oBAAE,EAAE,EAAE,IAAI;iBAAE;aACvB,CAAC,AAAC;YAEH,yBAAyB;YACzB,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;oBAAE,EAAE;uBAAE,KAAK;aAAE,CAAC,AAAC;YAEhD,KAAK,CACA,IAAI,CAAC,GAAG,CAAC,CACT,IAAI,CAAC;gBAAE,OAAO,EAAE,cAAc;gBAAE,IAAI,EAAE;2BAAE,KAAK;iBAAE;aAAE,CAAC,CAAC;SAC3D,CAAC,OAAO,CAAC,EAAE;YACR,IACI,CAAC,YAAY,CAAA,GAAA,0BAAM,CAAA,CAAC,6BAA6B,IACjD,CAAC,CAAC,IAAI,KAAK,OAAO,EAElB,KAAK,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;iBAE5C,KAAK,CAAC,mBAAmB,EAAE,CAAC;SAEnC;KACJ,CACJ,CAAC;IAEF,GAAG,CAAC,IAAI,CACJ,QAAQ,EACR;QACI,MAAM,EAAE;YACJ,WAAW,EAAE,CAAC;;;;;;;gBAOd,CAAC;YACD,IAAI,EAAE,kCAAY;YAClB,QAAQ,EAAE;AAAE,gBAAA,GAAG,EAAE,qCAAe;aAAE;SACrC;KACJ,EACD,OAAO,OAAO,EAAE,KAAK,GAAK;QACtB,+CAA+C;QAC/C,MAAM,SAAE,KAAK,CAAA,YAAE,QAAQ,CAAA,EAAE,GAAG,OAAO,CAAC,IAAI,AAAC;QAEzC,iCAAiC;QACjC,MAAM,IAAI,GAAG,MAAM,4BAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAAE,KAAK,EAAE;uBAAE,KAAK;aAAE;SAAE,CAAC,AAAC;QAE/D,IAAI,CAAC,IAAI,EACL,KAAK,CAAC,QAAQ,CAAC,sCAAsC,CAAC,CAAC;aAEvD,4DAA4D;QAC5D,IAAI,CAAE,MAAM,CAAA,GAAA,qBAAO,CAAA,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,AAAC,EACzC,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;aAClC;YACH,uBAAuB;YACvB,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;gBAC7B,EAAE,EAAE,IAAI,CAAC,EAAE;uBACX,KAAK;aACR,CAAC,AAAC;YAEH,KAAK,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnC,IAAI,EAAE;2BAAE,KAAK;iBAAE;aAClB,CAAC,CAAC;SACN;KAER,CACJ,CAAC;CACL,AAAC;IAEF,wCAAoB,GAAL,0BAAI;;;ACxHnB;;AAIA,MAAM,4CAAsB,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IACvC,SAAS,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,EAAE;CAC3B,CAAC,AAAC;AAEH,MAAM,6CAAuB,GAAG,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;IACxC,aAAa,EAAE,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;QAAE,OAAO,EAAE,kBAAkB;KAAE,CAAC;CAC9D,CAAC,AAAC;AAEH,MAAM,4BAAM,GAAG,IAAI,CAAA,GAAA,gCAAY,CAAA,EAAE,AAAC;AAElC,MAAM,0BAAI,GAAuB,OAAO,GAAG,EAAE,IAAI,GAAK;IAClD,0CAA0C;IAC1C,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,OAAO,EAAE,KAAK,GAAK;QAC/C,IAAI;YACA,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;SAC7B,CAAC,OAAO,GAAG,EAAE;YACV,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;SACrC;KACJ,CAAC,CAAC;IAEH,+BAA+B;IAC/B,GAAG,CAAC,GAAG,CACH,aAAa,EACb;QACI,MAAM,EAAE;YACJ,WAAW,EAAE,CAAC;;;;;gBAKd,CAAC;YACD,MAAM,EAAE,4CAAsB;YAC9B,OAAO,EAAE,6CAAuB;SACnC;KACJ,EACD,OAAO,OAAO,EAAE,KAAK,GAAK;QACtB,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,4BAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAC9C,KAAK,EAAE;oBACH,gBAAgB,EAAE;wBACd,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE;wBACvB,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,SAAS;qBACtC;iBACJ;gBACD,MAAM,EAAE;oBAAE,WAAW,EAAE,IAAI;oBAAE,EAAE,EAAE,IAAI;iBAAE;aAC1C,CAAC,AAAC;YAEH,IAAI,CAAC,QAAQ,EACT,KAAK,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;iBAClC;gBACH,mBAAmB;gBACnB,MAAM,4BAAM,CAAC,MAAM,CAAC,MAAM,CAAC;oBACvB,IAAI,EAAE;wBAAE,UAAU,EAAE,QAAQ,CAAC,EAAE;qBAAE;iBACpC,CAAC,CAAC;gBAEH,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;aACxC;SACJ,CAAC,OAAO,CAAC,EAAE;YACR,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,KAAK,CAAC,mBAAmB,CAAC,yBAAyB,CAAC,CAAC;SACxD;KACJ,CACJ,CAAC;CACL,AAAC;IAEF,wCAAoB,GAAL,0BAAI;;;ACpEnB;;AASO,MAAM,yCAAS,GAAG,CAAA,GAAA,0CAAS,CAAA,CAAS;IACvC,MAAM,EAAE;QACJ,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE;YAAC,YAAY;YAAE,MAAM;SAAC;QAChC,UAAU,EAAE;YACR,UAAU,EAAE;gBACR,IAAI,EAAE,QAAQ;aACjB;YACD,IAAI,EAAE;gBACF,IAAI,EAAE,QAAQ;aACjB;SACJ;KACJ;IACD,MAAM,EAAE,IAAI;CACf,CAAC,AAAC;AAEI,MAAM,yCAAa,GACtB;IACI,WAAW,EAAE,OAAO;IACpB,IAAI,EAAE,SAAS;IACf,WAAW,EAAE,IAAI;IACjB,OAAO,EAAE;QACL,IAAI,EAAE;YACF,KAAK,EAAE,YAAY;YACnB,WAAW,EACP,qDAAqD;YACzD,OAAO,EAAE,OAAO;SACnB;QACD,WAAW,EAAE,CAAA,GAAA,gEAAU,CAAA,CAAC,WAAW;QACnC,IAAI,EAAE,qBAAqB;QAC3B,OAAO,EAAE;YAAC,OAAO;SAAC;QAClB,QAAQ,EAAE;YAAC,kBAAkB;SAAC;QAC9B,QAAQ,EAAE;YAAC,kBAAkB;SAAC;KACjC;IACD,QAAQ,EAAE;QACN,WAAW,EAAE,KAAK;KACrB;CACJ,AAAC;;;ALjCN,MAAM,yBAAG,GAAG,CAAA,GAAA,wCAAO,CAAA,CAAC;IAAE,MAAM,EAAE,IAAI;CAAE,CAAC,AAAC;AAEtC,yBAAG,CAAC,QAAQ,CAAC,CAAA,GAAA,2CAAU,CAAA,EAAE;IAAE,MAAM,EAAE,CAAA,GAAA,yCAAS,CAAA,CAAC,UAAU;CAAE,CAAC,CAAC;AAC3D,yBAAG,CAAC,QAAQ,CAAC,CAAA,GAAA,gDAAe,CAAA,CAAC,CAAC;AAC9B,yBAAG,CAAC,QAAQ,CAAC,CAAA,GAAA,+CAAc,CAAA,EAAE,CAAA,GAAA,yCAAa,CAAA,CAAC,CAAC;AAE5C,kBAAkB;AAClB,yBAAG,CAAC,QAAQ,CAAC,CAAA,GAAA,wCAAI,CAAA,EAAE;IAAE,MAAM,EAAE,OAAO;CAAE,CAAC,CAAC;AACxC,yBAAG,CAAC,QAAQ,CAAC,CAAA,GAAA,wCAAS,CAAA,EAAE;IAAE,MAAM,EAAE,YAAY;CAAE,CAAC,CAAC;AAClD,yBAAG,CAAC,QAAQ,CAAC,CAAA,GAAA,wCAAI,CAAA,EAAE;IAAE,MAAM,EAAE,OAAO;CAAE,CAAC,CAAC;AAExC,qBAAqB;AACrB,yBAAG,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,OAAO,EAAE,KAAK,GAAK;IACzC,KAAK,CAAC,IAAI,CAAC;QAAE,OAAO,EAAE,oCAAoC;KAAE,CAAC,CAAC;CACjE,CAAC,CAAC;AAEH,yBAAG,CAAC,MAAM,CAAC,CAAA,GAAA,yCAAS,CAAA,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAC5B,OAAO,CAAC,GAAG,CAAC,CAAC,yBAAyB,EAAE,CAAA,GAAA,yCAAS,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC,CAC5D,CAAC","sources":["src/index.ts","src/routes/shortcuts.ts","src/utils/json-schema.json","src/routes/auth.ts","src/routes/goto.ts","src/utils/pluginConfig.ts"],"sourcesContent":["// Fastify Plugins\nimport fastify from \"fastify\";\nimport fastifyJwt from \"@fastify/jwt\";\nimport fastifySensible from \"@fastify/sensible\";\nimport fastifySwagger from \"@fastify/swagger\";\n\n// Route Modules\nimport shortcuts from \"./routes/shortcuts\";\nimport auth from \"./routes/auth\";\nimport goto from \"./routes/goto\";\n\n// Config imports\nimport { envConfig, swaggerConfig } from \"./utils/pluginConfig\";\n\nconst app = fastify({ logger: true });\n\napp.register(fastifyJwt, { secret: envConfig.JWT_SECRET });\napp.register(fastifySensible);\napp.register(fastifySwagger, swaggerConfig);\n\n// Register Routes\napp.register(auth, { prefix: \"/auth\" });\napp.register(shortcuts, { prefix: \"/shortcuts\" });\napp.register(goto, { prefix: \"/goto\" });\n\n// Health Check Route\napp.get(\"/health\", async (request, reply) => {\n    reply.send({ message: \"I'm doing fine! Thanks for asking.\" });\n});\n\napp.listen(envConfig.PORT).then(() =>\n    console.log(`Shorty listening on Port ${envConfig.PORT}`)\n);\n","import { FastifyPluginAsync } from \"fastify\";\nimport { PrismaClient, Shortcut, Prisma } from \"@prisma/client\";\nimport jsonSchema from \"../utils/json-schema.json\";\nimport { Static, Type } from \"@sinclair/typebox\";\nimport slugify from \"slugify\";\n\nconst getShortcutsQuery = Type.Object({\n    search: Type.Optional(Type.String()),\n    page: Type.Optional(Type.Integer()),\n    sort: Type.Optional(Type.String()),\n    order: Type.Optional(Type.String()),\n});\n\nconst createShortcutResponse = Type.Object({\n    message: Type.String(),\n    data: Type.Object({\n        id: Type.Number(),\n    }),\n});\n\nconst deleteShortcutParam = Type.Object({\n    id: Type.Number(),\n});\n\nconst shortCutHeaders = Type.Object({\n    Authorization: Type.String({ default: \"Bearer something\" }),\n});\n\nconst prisma = new PrismaClient();\n\nconst shortcuts: FastifyPluginAsync = async (app, opts) => {\n    // Add an onRequest hook for verifying JWT\n    app.addHook(\"onRequest\", async (request, reply) => {\n        try {\n            await request.jwtVerify();\n        } catch (err) {\n            reply.forbidden(\"Bad Auth Token\");\n        }\n    });\n\n    // Add jsonSchema to the app\n    app.addSchema({ $id: \"Shorty\", ...jsonSchema });\n\n    // Route for fetching all shortcuts\n    app.get<{\n        Reply: Array<Shortcut>;\n        Querystring: Static<typeof getShortcutsQuery>;\n    }>(\n        \"/\",\n        {\n            schema: {\n                description: `\n                    Get all shortcuts for a User Id.\n                    Pass in filters and sorting options.\n                    Searchable by shortLink, destination, and tags.\n                    \n                    Throws Internal Server Error if failed to fetch data.\n                `,\n                headers: shortCutHeaders,\n                querystring: getShortcutsQuery,\n                response: {\n                    200: {\n                        type: \"array\",\n                        items: { $ref: \"Shorty#/definitions/Shortcut\" },\n                    },\n                },\n            },\n        },\n        async (request, reply) => {\n            try {\n                const query: Prisma.ShortcutFindManyArgs = {\n                    where: { userId: request.user.id },\n                    include: { tags: true },\n                    take: 10,\n                };\n\n                if (request.query.search && query.where) {\n                    const search = request.query.search;\n\n                    query.where.OR = [\n                        { shortLink: { search } },\n                        { description: { search } },\n                        { tags: { some: { tag: { search } } } },\n                    ];\n                }\n\n                if (request.query.page) {\n                    query.skip = (request.query.page - 1) * 10;\n                }\n\n                if (request.query.sort) {\n                    query.orderBy = {\n                        [request.query.sort]: request.query.order,\n                    };\n                }\n\n                reply.send(await prisma.shortcut.findMany(query));\n            } catch (e) {\n                app.log.error(e);\n                reply.internalServerError(\"Failed to fetch shortcuts\");\n            }\n        }\n    );\n\n    // Route for creating a shortcut\n    app.post<{\n        Body: Prisma.ShortcutCreateWithoutTagsInput;\n        Reply: Static<typeof createShortcutResponse>;\n    }>(\n        \"/\",\n        {\n            schema: {\n                description: `\n                    Create a new Shortcut by passing in all the necessary information like destination, shortLink, tags etc.\n                    \n                    Throws a Not Acceptable Error if the shortLink is already taken.\n                    Throws an Internal Server Error if failed to create the shortcut.\n                `,\n                headers: shortCutHeaders,\n                body: { $ref: \"Shorty#/definitions/Shortcut\" },\n                response: {\n                    201: createShortcutResponse,\n                },\n            },\n        },\n        async (request, reply) => {\n            const payload = request.body;\n            payload.shortLink = slugify(payload.shortLink, {\n                lower: true,\n            });\n\n            try {\n                const { id } = await prisma.shortcut.create({\n                    data: {\n                        ...payload,\n                        // @ts-ignore\n                        tags: { create: payload.tags },\n                        user: { connect: { id: request.user.id } },\n                    },\n                    select: { id: true },\n                });\n\n                reply\n                    .code(201)\n                    .send({ message: \"Shortcut created\", data: { id } });\n            } catch (e) {\n                if (\n                    e instanceof Prisma.PrismaClientKnownRequestError &&\n                    e.code === \"P2002\"\n                ) {\n                    reply.notAcceptable(\"ShortLink already in use\");\n                } else {\n                    app.log.error(e);\n                    reply.internalServerError(\"Failed to create a Shortcut\");\n                }\n            }\n        }\n    );\n\n    // Route for deleting a shortcut\n    app.delete<{ Params: Static<typeof deleteShortcutParam> }>(\n        \"/:id\",\n        {\n            schema: {\n                description: `\n                    Delete a Shortcut by passing in the id of the shortcut.\n                    \n                    Throws a Not Found Error if the shortcut does not exist.\n                    Throws an Internal Server Error if failed to delete the shortcut.\n                `,\n                headers: shortCutHeaders,\n                params: deleteShortcutParam,\n            },\n        },\n        async (request, reply) => {\n            try {\n                await prisma.shortcut.delete({\n                    where: { id: request.params.id },\n                });\n\n                reply.send({ message: \"Shortcut deleted\" });\n            } catch (e) {\n                if (\n                    e instanceof Prisma.PrismaClientKnownRequestError &&\n                    (e.code === \"P2001\" || e.code === \"P2025\")\n                ) {\n                    reply.notFound(\n                        `Shortcut with Id: ${request.params.id} not found`\n                    );\n                } else {\n                    app.log.error(e);\n                    reply.internalServerError(\"Failed to delete a Shortcut\");\n                }\n            }\n        }\n    );\n};\n\nexport default shortcuts;\n","{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"definitions\": {\n    \"User\": {\n      \"type\": \"object\",\n      \"description\": \"User Model.\\nContains fields like username, email, hashedPassword, etc.\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        },\n        \"shortcuts\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Shortcut\"\n          }\n        }\n      }\n    },\n    \"Shortcut\": {\n      \"description\": \"Shortcut Model used to store Shortcuts.\\nEach shortcut is linked to a user.\\nContains fields like shortLink, destination, tags etc\",\n      \"required\": [\"destination\", \"shortLink\", \"tags\", \"description\"],\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\"\n        },\n        \"destination\": {\n          \"type\": \"string\",\n          \"format\": \"uri\"\n        },\n        \"shortLink\": {\n          \"type\": \"string\"\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Tag\"\n          }\n        },\n        \"description\": {\n          \"type\": \"string\"\n        },\n        \"user\": {\n          \"$ref\": \"#/definitions/User\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        },\n        \"records\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Record\"\n          }\n        }\n      }\n    },\n    \"Tag\": {\n      \"description\": \"Tag Model used to store Tags.\\nEach tag is linked to a shortcut.\\nContains fields like name, color, etc\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\"\n        },\n        \"tag\": {\n          \"type\": \"string\"\n        },\n        \"shortcuts\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Shortcut\"\n          }\n        },\n        \"createdAt\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        }\n      }\n    },\n    \"Record\": {\n      \"description\": \"Record Model serves no purpose for the API except for analytics.\\nFor example we could get to know how many times a user is accessing a shortcut.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\"\n        },\n        \"shortcut\": {\n          \"$ref\": \"#/definitions/Shortcut\"\n        },\n        \"accessedAt\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        }\n      }\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"user\": {\n      \"$ref\": \"#/definitions/User\"\n    },\n    \"shortcut\": {\n      \"$ref\": \"#/definitions/Shortcut\"\n    },\n    \"tag\": {\n      \"$ref\": \"#/definitions/Tag\"\n    },\n    \"record\": {\n      \"$ref\": \"#/definitions/Record\"\n    }\n  }\n}\n","import { PrismaClient, Prisma } from \"@prisma/client\";\nimport { Static, Type } from \"@sinclair/typebox\";\nimport { compare, hash } from \"bcrypt\";\nimport { FastifyPluginAsync } from \"fastify\";\n\nconst prisma = new PrismaClient();\n\nconst loginPayload = Type.Object({\n    email: Type.String({ format: \"email\" }),\n    password: Type.String({ minLength: 12 }),\n});\n\nconst registerPayload = Type.Object({\n    username: Type.String(),\n    email: Type.String({ format: \"email\" }),\n    password: Type.String({ minLength: 12 }),\n});\n\nconst responsePayload = Type.Object({\n    message: Type.String(),\n    data: Type.Object({\n        token: Type.String(),\n    }),\n});\n\nconst auth: FastifyPluginAsync = async (app, opts) => {\n    app.post<{ Body: Static<typeof registerPayload> }>(\n        \"/register\",\n        {\n            schema: {\n                description: `\n                    Register a new user by passing in credentials like username, email and password.\n                    Returns a JWT which is required to access rest of the API.\n                    \n                    Throws a Not Acceptable Error if the Email is already in use.\n                    Throws an Internal Server Error if the user could not be created.\n                `,\n                body: registerPayload,\n                response: { 201: responsePayload },\n            },\n        },\n        async (request, reply) => {\n            // Extract the payload from the request\n            const { username, email, password } = request.body;\n\n            // Create a user\n            try {\n                // Hash the password\n                const hashedPassword = await hash(password, 10);\n\n                const { id } = await prisma.user.create({\n                    data: { username, email, password: hashedPassword },\n                    select: { id: true },\n                });\n\n                // Sign a token and reply\n                const token = await app.jwt.sign({ id, email });\n\n                reply\n                    .code(201)\n                    .send({ message: \"User created\", data: { token } });\n            } catch (e) {\n                if (\n                    e instanceof Prisma.PrismaClientKnownRequestError &&\n                    e.code === \"P2002\"\n                ) {\n                    reply.notAcceptable(\"Email already in use\");\n                } else {\n                    reply.internalServerError();\n                }\n            }\n        }\n    );\n\n    app.post<{ Body: Static<typeof loginPayload> }>(\n        \"/login\",\n        {\n            schema: {\n                description: `\n                    Login a user by passing in credentials like email and password.\n                    Returns a JWT which is required to access rest of the API.\n                    \n                    Throws a Not Found Error if the user could not be found.\n                    Throws a Bad Request Error if the password is incorrect.\n                    Throws an Internal Server Error if the user could not be logged in.\n                `,\n                body: loginPayload,\n                response: { 200: responsePayload },\n            },\n        },\n        async (request, reply) => {\n            // Extract email and password from request body\n            const { email, password } = request.body;\n\n            // Find a user based on the email\n            const user = await prisma.user.findFirst({ where: { email } });\n\n            if (!user) {\n                reply.notFound(\"User not found, try signing up first\");\n            } else {\n                // Compare the password with the hash stored in the database\n                if (!(await compare(password, user.password))) {\n                    reply.badRequest(\"Invalid password\");\n                } else {\n                    // Sign a JWT and reply\n                    const token = await app.jwt.sign({\n                        id: user.id,\n                        email,\n                    });\n\n                    reply.send({\n                        message: `Welcome ${user.username}`,\n                        data: { token },\n                    });\n                }\n            }\n        }\n    );\n};\n\nexport default auth;\n","import { FastifyPluginAsync } from \"fastify\";\nimport { Static, Type } from \"@sinclair/typebox\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst getGotoShortLinkParams = Type.Object({\n    shortLink: Type.String(),\n});\n\nconst getGotoShortLinkHeaders = Type.Object({\n    Authorization: Type.String({ default: \"Bearer something\" }),\n});\n\nconst prisma = new PrismaClient();\n\nconst goto: FastifyPluginAsync = async (app, opts) => {\n    // Add an onRequest hook for verifying JWT\n    app.addHook(\"onRequest\", async (request, reply) => {\n        try {\n            await request.jwtVerify();\n        } catch (err) {\n            reply.forbidden(\"Bad Auth Token\");\n        }\n    });\n\n    // Add route to goto shortLinks\n    app.get<{ Params: Static<typeof getGotoShortLinkParams> }>(\n        \"/:shortLink\",\n        {\n            schema: {\n                description: `\n                    Enter the shortLink and get redirected to the destination\n                    \n                    Throws a Not Found Error if the shortLink does not exist\n                    Throws an Internal Server Error if failed to goto shortLink\n                `,\n                params: getGotoShortLinkParams,\n                headers: getGotoShortLinkHeaders,\n            },\n        },\n        async (request, reply) => {\n            try {\n                const shortcut = await prisma.shortcut.findUnique({\n                    where: {\n                        shortLink_userId: {\n                            userId: request.user.id,\n                            shortLink: request.params.shortLink,\n                        },\n                    },\n                    select: { destination: true, id: true },\n                });\n\n                if (!shortcut) {\n                    reply.notFound(\"Shortcut not found\");\n                } else {\n                    // Add it to record\n                    await prisma.record.create({\n                        data: { shortcutId: shortcut.id },\n                    });\n\n                    reply.redirect(shortcut.destination);\n                }\n            } catch (e) {\n                app.log.error(e);\n                reply.internalServerError(\"Failed to goto shortcut\");\n            }\n        }\n    );\n};\n\nexport default goto;\n","// Register Plugins\nimport envSchema from \"env-schema\";\nimport { FastifyRegisterOptions } from \"fastify\";\nimport { FastifyDynamicSwaggerOptions } from \"@fastify/swagger\";\nimport jsonSchema from \"./json-schema.json\";\n\ntype Schema = {\n    JWT_SECRET: string;\n    PORT: number;\n};\nexport const envConfig = envSchema<Schema>({\n    schema: {\n        type: \"object\",\n        required: [\"JWT_SECRET\", \"PORT\"],\n        properties: {\n            JWT_SECRET: {\n                type: \"string\",\n            },\n            PORT: {\n                type: \"number\",\n            },\n        },\n    },\n    dotenv: true,\n});\n\nexport const swaggerConfig: FastifyRegisterOptions<FastifyDynamicSwaggerOptions> =\n    {\n        routePrefix: \"/docs\",\n        mode: \"dynamic\",\n        exposeRoute: true,\n        swagger: {\n            info: {\n                title: \"Shorty API\",\n                description:\n                    \"A simple API for creating and accessing short links\",\n                version: \"1.0.0\",\n            },\n            definitions: jsonSchema.definitions,\n            host: \"shorty.onrender.com\",\n            schemes: [\"https\"],\n            consumes: [\"application/json\"],\n            produces: [\"application/json\"],\n        },\n        uiConfig: {\n            deepLinking: false,\n        },\n    };\n"],"names":[],"version":3,"file":"index.js.map"}